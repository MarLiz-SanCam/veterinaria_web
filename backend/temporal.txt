const { Router } = require('express');
const route = Router();

route.get('/', (req, res) => {
    res.status(200).json({ message: 'Server on port 8000 and database is connected :)' });
});

//Devuelve todos los usuarios
route.get('/usuarios', async (req, res) => {
    try {
        const [rows] = await req.dbConnection.query('SELECT * FROM usuarios');
        res.json(rows);
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: 'Error al obtener usuarios' });
    }
});

//Devuelve un usuario específico según su id
route.get('/usuarios/:idusuario', async (req, res) => {
    const { idusuario } = req.params;
    try {
        const [rows] = await req.dbConnection.query('SELECT * FROM usuarios WHERE idusuario = ?', [idusuario]);
        res.json(rows);
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: 'Error al obtener usuario' });
    }
});

//Agrega un usuario usando el proceso almacenado en la base de datos
route.post('/usuarios', async (req, res) => {
    const { nombre, apellido, correo, clave } = req.body;
    const p_opcion = 1; // Opción para alta
    const p_id_usuario = null; // NULL para alta

    try {
        await req.dbConnection.query('SET @valid = 0, @error = "", @fecha = NOW()');

        // Llamar al procedimiento almacenado
        await req.dbConnection.query(
            'CALL p_opcion(?, ?, ?, ?, ?, ?, @valid, @error, @fecha)',
            [p_opcion, p_id_usuario, nombre, apellido, correo, clave]
        );

        // Obtener resultados de salida
        const [results] = await req.dbConnection.query('SELECT @valid AS valid, @error AS error, @fecha AS fecha');

        res.json({
            valid: results[0].valid,
            error: results[0].error,
            fecha: results[0].fecha,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error al ejecutar el procedimiento' });
    }
});

// Iniciar sesión usando el proceso almacenado en la base de datos
route.post('/login', async (req, res) => {
    const { correo, clave } = req.body;
    const p_opcion = 5; // Opción para validar login
    let id_usuario = null;

    try {
        // Llamar al procedimiento almacenado
        await req.dbConnection.query(
            'CALL p_opcion(?, ?, ?, ?, ?, ?, @valid, @error, @fecha)',
            [p_opcion, id_usuario, null, null, correo, clave]
        );

        // Obtener resultados de salida
        const [results] = await req.dbConnection.query('SELECT @valid AS valid, @error AS error, @fecha AS fecha, @idusuario AS idusuario');

        res.json({
            valid: results[0].valid,
            error: results[0].error,
            fecha: results[0].fecha,
            idusuario: results[0].idusuario,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error en validación de login' });
    }
});

//Eliminar usuario usando el proceso almacenado en la base de datos
route.delete('/usuarios/:idusuario', async (req, res) => {
    const { idusuario } = req.params;

    try {
        await req.dbConnection.query(
            'CALL p_opcion(?, ?, ?, ?, ?, ?, @valid, @error, @fecha)',
            [2, idusuario, null, null, null, null]
        );

        const [results] = await req.dbConnection.query('SELECT @valid AS valid, @error AS error');

        res.json({
            valid: results[0].valid,
            error: results[0].error,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error al eliminar usuario' });
    }
});

//Actualizar usuario usando el proceso almacenado en la base de datos
route.put('/usuarios/:idusuario', async (req, res) => {
    const { idusuario } = req.params;
    const { nombre, apellido, correo, clave } = req.body;

    try {
        await req.dbConnection.query(
            'CALL p_opcion(?, ?, ?, ?, ?, ?, @valid, @error, @fecha)',
            [3, idusuario, nombre, apellido, correo, clave]
        );

        const [results] = await req.dbConnection.query('SELECT @valid AS valid, @error AS error');

        res.json({
            valid: results[0].valid,
            error: results[0].error,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error al editar usuario' });
    }
});

module.exports = route;
